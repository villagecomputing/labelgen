# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .base import BaseModel
from .experiment_table_column_props_schema import ExperimentTableColumnPropsSchema


@JsonMap({})
class ExperimentViewResponseDataset(BaseModel):
    """ExperimentViewResponseDataset

    :param name: name, defaults to None
    :type name: str, optional
    :param uuid: uuid, defaults to None
    :type uuid: str, optional
    """

    def __init__(self, name: str = None, uuid: str = None):
        if name is not None:
            self.name = name
        if uuid is not None:
            self.uuid = uuid


@JsonMap({"latency_p50": "latencyP50", "latency_p90": "latencyP90"})
class ExperimentViewResponse(BaseModel):
    """ExperimentViewResponse

    :param uuid: uuid
    :type uuid: str
    :param name: name
    :type name: str
    :param created_at: created_at
    :type created_at: str
    :param description: description, defaults to None
    :type description: str, optional
    :param columns: columns
    :type columns: List[ExperimentTableColumnPropsSchema]
    :param rows: rows
    :type rows: List[dict]
    :param dataset: dataset
    :type dataset: ExperimentViewResponseDataset
    :param latency_p50: latency_p50, defaults to None
    :type latency_p50: float, optional
    :param latency_p90: latency_p90, defaults to None
    :type latency_p90: float, optional
    :param runtime: runtime, defaults to None
    :type runtime: float, optional
    :param cost: cost, defaults to None
    :type cost: float, optional
    :param accuracy: accuracy, defaults to None
    :type accuracy: float, optional
    :param parameters: parameters, defaults to None
    :type parameters: str, optional
    """

    def __init__(
        self,
        uuid: str,
        name: str,
        created_at: str,
        columns: List[ExperimentTableColumnPropsSchema],
        rows: List[dict],
        dataset: ExperimentViewResponseDataset,
        description: str = None,
        latency_p50: float = None,
        latency_p90: float = None,
        runtime: float = None,
        cost: float = None,
        accuracy: float = None,
        parameters: str = None,
    ):
        self.uuid = uuid
        self.name = name
        self.created_at = created_at
        if description is not None:
            self.description = description
        self.columns = self._define_list(columns, ExperimentTableColumnPropsSchema)
        self.rows = rows
        self.dataset = self._define_object(dataset, ExperimentViewResponseDataset)
        if latency_p50 is not None:
            self.latency_p50 = latency_p50
        if latency_p90 is not None:
            self.latency_p90 = latency_p90
        if runtime is not None:
            self.runtime = runtime
        if cost is not None:
            self.cost = cost
        if accuracy is not None:
            self.accuracy = accuracy
        if parameters is not None:
            self.parameters = parameters
