# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models.new_experiment_response import NewExperimentResponse
from ..models.new_experiment_payload import NewExperimentPayload
from ..models.list_experiment_response import ListExperimentResponse
from ..models.experiment_view_response import ExperimentViewResponse
from ..models.experiment_insert_payload import ExperimentInsertPayload


class ExperimentService(BaseService):

    @cast_models
    def insert_experiment_row(
        self, request_body: ExperimentInsertPayload, experiment_id: str
    ):
        """Ensures the experiment is created and inserts the given steps as a row for the given experiment

        :param request_body: The request body.
        :type request_body: ExperimentInsertPayload
        :param experiment_id: experiment_id
        :type experiment_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(ExperimentInsertPayload).validate(request_body)
        Validator(str).validate(experiment_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/experiment/{{experimentId}}/insert",
                self.get_default_headers(),
            )
            .add_path("experimentId", experiment_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return response

    @cast_models
    def get_experiment_data(self, experiment_id: str) -> ExperimentViewResponse:
        """Fetches the details of an experiment with the specified Id.

        :param experiment_id: The unique identifier of the experiment to retrieve.
        :type experiment_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Experiment data retrieved successfully.
        :rtype: ExperimentViewResponse
        """

        Validator(str).validate(experiment_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/experiment/{{experimentId}}",
                self.get_default_headers(),
            )
            .add_path("experimentId", experiment_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return ExperimentViewResponse._unmap(response)

    @cast_models
    def list_experiments(self) -> List[ListExperimentResponse]:
        """List all experiments

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: A list of experiments.
        :rtype: List[ListExperimentResponse]
        """

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/experiment/list", self.get_default_headers()
            )
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)

        return [ListExperimentResponse._unmap(item) for item in response]

    @cast_models
    def declare_experiment(
        self, request_body: NewExperimentPayload
    ) -> NewExperimentResponse:
        """Declare a new experiment for a given dataset Id

        :param request_body: The request body.
        :type request_body: NewExperimentPayload
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: Ok
        :rtype: NewExperimentResponse
        """

        Validator(NewExperimentPayload).validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/experiment/new", self.get_default_headers()
            )
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)

        return NewExperimentResponse._unmap(response)
